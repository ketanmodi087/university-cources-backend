service: university-courses-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "secretsmanager:GetSecretValue"
          Resource: "*"
        - Effect: Allow
          Action:
            - "secretsmanager:ListSecrets"
          Resource: "*"
        - Effect: Allow
          Action:
            - "s3:Put*"
          Resource: "*"
        - Effect: Allow
          Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResources
            - cloudformation:GetTemplate
            - cloudformation:ValidateTemplate
          Resource: "*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: "*"

  # you can add statements to the Lambda function's IAM Role here
  #  iam:
  #    role:
  #      statements:
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:ListBucket"
  #          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:PutObject"
  #          Resource:
  #            Fn::Join:
  #              - ""
  #              - - "arn:aws:s3:::"
  #                - "Ref" : "ServerlessDeploymentBucket"
  #                - "/*"

  # you can define service wide environment variables here
  environment:
    DATABASE_URL: ''
    JWT_SECRET: ABC#123

# you can add packaging information here
package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**
plugins:
  - serverless-offline

functions:
  register:
    handler: src/handlers/users.register
    events:
      - http:
          path: user/register
          method: post
          cors: true
  login:
    handler: src/handlers/users.login
    events:
      - http:
          path: user/login
          method: post
          cors: true
  assignCourseToUser:
    handler: src/handlers/users.assignCourseToUser
    events:
      - http:
          path: user/assigncourse
          method: post
          cors: true
  unAssignCourseToUser:
    handler: src/handlers/users.unAssignCourseToUser
    events:
      - http:
          path: user/unassigncourse
          method: post
          cors: true
  getAssignedCourses:
    handler: src/handlers/users.getAssignedCourses
    events:
      - http:
          path: user/courses
          method: get
          cors: true
  getCourses:
    handler: src/handlers/courses.getCourses
    events:
      - http:
          path: courses
          method: get
          cors: true

custom:
  serverless-offline:
    host: 0.0.0.0
    port: 8000
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
